{"mappings":"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","sources":["<anon>","public/script.js"],"sourcesContent":["let postsArray = [];\nlet template;\nasync function getPosts() {\n    try {\n        const response = await fetch(\"http://localhost:3000/posts\");\n        console.log(\"Response status:\", response.status);\n        if (!response.ok) throw new Error(\"Network Error Response Identified\");\n        const data = await response.json();\n        console.log(\"Fetched data:\", data);\n        postsArray = data;\n    } catch (error) {\n        console.error(\"Error fetching or processing data\", error);\n    }\n}\nasync function createPost(title, content) {\n    try {\n        const response = await fetch(\"http://localhost:3000/posts\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title,\n                content\n            })\n        });\n        console.log(response, \"response\");\n        if (!response.ok) throw new Error(\"Failed to create post\");\n        const newPost = await response.json();\n        postsArray.push(newPost);\n        console.log(\"Rendering posts with data:\", postsArray);\n        renderPosts(postsArray);\n    } catch (error) {\n        console.log(error);\n    }\n}\nconst updatePost = async (id, title, content)=>{\n    try {\n        const response = await fetch(`http://localhost:3000/posts/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title,\n                content\n            })\n        });\n        if (!response.ok) throw new Error(\"Failed to update post\");\n        const updatedPost = await response.json();\n        console.log(\"Updated post:\", updatedPost);\n        postsArray = postsArray.map((post)=>post.id === id ? {\n                ...post,\n                title,\n                content\n            } : post);\n        renderPosts(postsArray);\n    } catch (error) {\n        console.error(\"Error updating post:\", error);\n    }\n};\nasync function deletePost(id) {\n    try {\n        const response = await fetch(`http://localhost:3000/posts/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        console.log(\"deletePost response:\", response);\n        if (!response.ok) throw new Error(\"Failed to delete the post\");\n        postsArray = postsArray.filter((post)=>post.id !== Number(id));\n        renderPosts(postsArray);\n    } catch (error) {\n        console.error(\"Error deleting post\", error);\n    }\n}\nasync function createComment(postId, commentText) {\n    console.log(\"\\uD83D\\uDEA8 Debugging createComment | postId:\", postId, \"Comment:\", commentText);\n    if (!postId || postId < 1) {\n        console.error(\"\\u274C Invalid post ID:\", postId);\n        return;\n    }\n    try {\n        const response = await fetch(`http://localhost:3000/posts/${postId}/comments`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                content: commentText\n            })\n        });\n        if (!response.ok) throw new Error(`Failed to create comment. Server responded with status ${response.status}`);\n        const result = await response.json();\n        console.log(\"\\u2705 Comment added:\", result);\n        postsArray = postsArray.map((post)=>post.id === postId ? {\n                ...post,\n                comments: [\n                    ...post.comments || [],\n                    result.comment\n                ]\n            } : post);\n        renderPosts(postsArray);\n    } catch (error) {\n        console.error(\"\\u274C Error creating comment:\", error);\n    }\n}\nfunction renderPosts(posts) {\n    const menuContainer = document.querySelector(\".menuContainer\");\n    if (!template) return console.log(\"Template not found\");\n    const postTemplate = template({\n        posts\n    });\n    menuContainer.innerHTML = postTemplate;\n}\ndocument.getElementById(\"createPostForm\").addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const title = document.getElementById(\"titleInput\").value;\n    const content = document.getElementById(\"contentInput\").value;\n    createPost(title, content);\n    document.getElementById(\"titleInput\").value = \"\";\n    document.getElementById(\"contentInput\").value = \"\";\n});\ndocument.addEventListener(\"click\", function(event) {\n    if (event.target.classList.contains(\"editPostButton\")) {\n        const findId = event.target.getAttribute(\"data-id\");\n        const newTitle = prompt(\"Enter new title:\");\n        const newText = prompt(\"Enter new content:\");\n        if (newTitle && newText) {\n            console.log(`Updating post with ID: ${findId}`);\n            updatePost(Number(findId), newTitle, newText);\n        }\n    }\n});\ndocument.addEventListener(\"click\", (event)=>{\n    if (event.target.classList.contains(\"deletePostButton\")) {\n        const id = event.target.getAttribute(\"data-id\");\n        if (id) {\n            console.log(\"Delete button clicked for post ID:\", id);\n            deletePost(id);\n        } else console.error(\"No valid post ID found for delete operation.\");\n    }\n});\ndocument.addEventListener(\"submit\", (event)=>{\n    if (event.target.classList.contains(\"createCommentForm\")) {\n        event.preventDefault();\n        const postId = Number(event.target.getAttribute(\"data-post-id\"));\n        const commentInput = event.target.querySelector(\".commentInput\");\n        const commentText = commentInput.value.trim();\n        if (!commentText) {\n            console.error(\"Comment cannot be empty\");\n            return;\n        }\n        createComment(postId, commentText);\n        commentInput.value = \"\";\n    }\n});\nasync function startApp() {\n    const posts = await getPosts();\n    const sourceElement = document.querySelector(\".menuTemplate\");\n    const source = sourceElement.innerHTML || sourceElement.content.firstElementChild.innerHTML;\n    if (!source.trim()) {\n        console.error(\"Template source is empty\");\n        return;\n    }\n    template = Handlebars.compile(source);\n    renderPosts(postsArray);\n}\nstartApp();\n\n//# sourceMappingURL=index.28f6ac15.js.map\n","let postsArray = [];\r\nlet template;\r\n\r\nasync function getPosts() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/posts\");\r\n\r\n    console.log(\"Response status:\", response.status);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Network Error Response Identified\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"Fetched data:\", data);\r\n    postsArray = data;\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching or processing data\", error);\r\n  }\r\n}\r\n\r\nasync function createPost(title, content) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/posts\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ title, content }),\r\n    });\r\n    console.log(response, \"response\");\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to create post\");\r\n    }\r\n\r\n    const newPost = await response.json();\r\n    postsArray.push(newPost);\r\n    console.log(\"Rendering posts with data:\", postsArray);\r\n    renderPosts(postsArray);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nconst updatePost = async (id, title, content) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ title, content }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to update post\");\r\n    }\r\n\r\n    const updatedPost = await response.json();\r\n    console.log(\"Updated post:\", updatedPost);\r\n\r\n    postsArray = postsArray.map((post) =>\r\n      post.id === id ? { ...post, title, content } : post\r\n    );\r\n    renderPosts(postsArray);\r\n  } catch (error) {\r\n    console.error(\"Error updating post:\", error);\r\n  }\r\n};\r\n\r\nasync function deletePost(id) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    console.log(\"deletePost response:\", response);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to delete the post\");\r\n    }\r\n\r\n    postsArray = postsArray.filter((post) => post.id !== Number(id));\r\n    renderPosts(postsArray);\r\n  } catch (error) {\r\n    console.error(\"Error deleting post\", error);\r\n  }\r\n}\r\n\r\nasync function createComment(postId, commentText) {\r\n  console.log(\r\n    \"🚨 Debugging createComment | postId:\",\r\n    postId,\r\n    \"Comment:\",\r\n    commentText\r\n  );\r\n\r\n  if (!postId || postId < 1) {\r\n    console.error(\"❌ Invalid post ID:\", postId);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `http://localhost:3000/posts/${postId}/comments`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ content: commentText }),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        `Failed to create comment. Server responded with status ${response.status}`\r\n      );\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log(\"✅ Comment added:\", result);\r\n\r\n    postsArray = postsArray.map((post) =>\r\n      post.id === postId\r\n        ? { ...post, comments: [...(post.comments || []), result.comment] }\r\n        : post\r\n    );\r\n    renderPosts(postsArray);\r\n  } catch (error) {\r\n    console.error(\"❌ Error creating comment:\", error);\r\n  }\r\n}\r\n\r\nfunction renderPosts(posts) {\r\n  const menuContainer = document.querySelector(\".menuContainer\");\r\n\r\n  if (!template) {\r\n    return console.log(\"Template not found\");\r\n  }\r\n  const postTemplate = template({ posts });\r\n  menuContainer.innerHTML = postTemplate;\r\n}\r\n\r\ndocument.getElementById(\"createPostForm\").addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const title = document.getElementById(\"titleInput\").value;\r\n  const content = document.getElementById(\"contentInput\").value;\r\n  createPost(title, content);\r\n\r\n  document.getElementById(\"titleInput\").value = \"\";\r\n  document.getElementById(\"contentInput\").value = \"\";\r\n});\r\n\r\ndocument.addEventListener(\"click\", function (event) {\r\n  if (event.target.classList.contains(\"editPostButton\")) {\r\n    const findId = event.target.getAttribute(\"data-id\");\r\n    const newTitle = prompt(\"Enter new title:\");\r\n    const newText = prompt(\"Enter new content:\");\r\n\r\n    if (newTitle && newText) {\r\n      console.log(`Updating post with ID: ${findId}`);\r\n      updatePost(Number(findId), newTitle, newText);\r\n    }\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n  if (event.target.classList.contains(\"deletePostButton\")) {\r\n    const id = event.target.getAttribute(\"data-id\");\r\n    if (id) {\r\n      console.log(\"Delete button clicked for post ID:\", id);\r\n      deletePost(id);\r\n    } else {\r\n      console.error(\"No valid post ID found for delete operation.\");\r\n    }\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"submit\", (event) => {\r\n  if (event.target.classList.contains(\"createCommentForm\")) {\r\n    event.preventDefault();\r\n\r\n    const postId = Number(event.target.getAttribute(\"data-post-id\"));\r\n    const commentInput = event.target.querySelector(\".commentInput\");\r\n    const commentText = commentInput.value.trim();\r\n\r\n    if (!commentText) {\r\n      console.error(\"Comment cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    createComment(postId, commentText);\r\n    commentInput.value = \"\";\r\n  }\r\n});\r\n\r\nasync function startApp() {\r\n  const posts = await getPosts();\r\n  const sourceElement = document.querySelector(\".menuTemplate\");\r\n\r\n  const source =\r\n    sourceElement.innerHTML ||\r\n    sourceElement.content.firstElementChild.innerHTML;\r\n  if (!source.trim()) {\r\n    console.error(\"Template source is empty\");\r\n    return;\r\n  }\r\n\r\n  template = Handlebars.compile(source);\r\n  renderPosts(postsArray);\r\n}\r\n\r\nstartApp();\r\n"],"names":["template","postsArray","getPosts","response","fetch","console","log","status","ok","Error","data","json","error","createPost","title","content","method","headers","body","JSON","stringify","newPost","push","renderPosts","updatePost","id","updatedPost","map","post","deletePost","filter","Number","createComment","postId","commentText","result","comments","comment","posts","menuContainer","document","querySelector","innerHTML","getElementById","addEventListener","e","preventDefault","value","event","target","classList","contains","findId","getAttribute","newTitle","prompt","newText","commentInput","trim","startApp","sourceElement","source","firstElementChild","Handlebars","compile"],"version":3,"file":"index.28f6ac15.js.map"}